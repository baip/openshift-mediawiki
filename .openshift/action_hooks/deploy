#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

set -e

version="$(cat ${OPENSHIFT_REPO_DIR}/libs/VERSION)"

if [ -z $OPENSHIFT_MYSQL_DB_HOST ]
then
    echo 1>&2
    echo "Could not find mysql database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c mysql-5.5" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
fi

# Download and extract mediawiki
if [[ ! -d ${OPENSHIFT_DATA_DIR}/mediawiki-${version} ]]
then
    pushd ${OPENSHIFT_DATA_DIR}

    ${OPENSHIFT_REPO_DIR}/libs/install-mediawiki ${version}

    popd - > /dev/null
fi

mysql_cmd="${OPENSHIFT_DATA_DIR}.mysql/bin/mysql"

if [ ! -f ~/.env/user_vars/OPENSHIFT_MYSQL_DB_USERNAME ]; then
    echo "Setting MYSQL password and environment variables"
    OPENSHIFT_MYSQL_DB_USERNAME='root'
    OPENSHIFT_MYSQL_DB_PASSWORD='root'
    echo ${OPENSHIFT_MYSQL_DB_USERNAME} > ~/.env/user_vars/OPENSHIFT_MYSQL_DB_USERNAME
    echo ${OPENSHIFT_MYSQL_DB_PASSWORD} > ~/.env/user_vars/OPENSHIFT_MYSQL_DB_PASSWORD

    $mysql_cmd --socket=${TMP}mysql.sock -u ${OPENSHIFT_MYSQL_DB_USERNAME} -e "GRANT ALL PRIVILEGES ON *.* TO '${OPENSHIFT_MYSQL_DB_USERNAME}'@'${OPENSHIFT_MYSQL_DB_HOST}' IDENTIFIED BY '$OPENSHIFT_MYSQL_DB_PASSWORD' WITH GRANT OPTION; FLUSH PRIVILEGES;"
fi

mysql_cnf="${OPENSHIFT_DATA_DIR}.mysql/my.cnf"
if ! \grep -q "bind-address=${OPENSHIFT_MYSQL_DB_HOST}" $mysql_cnf; then
    echo "Patching $mysql_cnf to listen on the correct IP"
    echo "bind-address=${OPENSHIFT_MYSQL_DB_HOST}" >> $mysql_cnf
    ${OPENSHIFT_MYSQL_DIR}/bin/control restart
fi

sleep 1
# Confirm database exists, if not create it
if ! $mysql_cmd -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" -e "show tables;" $OPENSHIFT_APP_NAME > /dev/null 2>&1
then
    echo
    echo "Database not found!  Creating and importing"
    echo
    $mysql_cmd -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" -e "create database ${OPENSHIFT_APP_NAME};"
    $mysql_cmd -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" $OPENSHIFT_APP_NAME < "$OPENSHIFT_REPO_DIR/.openshift/action_hooks/openshift.sql"
    echo
    echo "done."
    echo "=================================================="
    echo "  Wiki-Admin login: admin"
    echo "  Wiki-Admin password: admin123"
    echo "  Don't forget to change your wiki admin password!"
    echo "=================================================="
else
    echo "Database found, skipping build"
fi

source ${OPENSHIFT_REPO_DIR}/libs/generate-secret

if [[ -f ${OPENSHIFT_DATA_DIR}/mediawiki_upgrade_key ]]
then
    upgrade_key=$(cat ${OPENSHIFT_DATA_DIR}/mediawiki_upgrade_key)
else
    echo ${upgrade_key} > ${OPENSHIFT_DATA_DIR}/mediawiki_upgrade_key
    echo "=================================================="
    echo "  Mediawiki Upgrade Key: $(cat $OPENSHIFT_DATA_DIR/mediawiki_upgrade_key)"
    echo "=================================================="
fi

if [[ -f ${OPENSHIFT_DATA_DIR}/mediawiki_secret_key ]]
then
    secret_key=$(cat ${OPENSHIFT_DATA_DIR}/mediawiki_secret_key)
else
    echo ${secret_key} > ${OPENSHIFT_DATA_DIR}/mediawiki_secret_key
fi

if [[ ! -d ${OPENSHIFT_DATA_DIR}/images ]]
then
    rm -f ${OPENSHIFT_DATA_DIR}/images
    mkdir ${OPENSHIFT_DATA_DIR}/images
fi

if [[ ! -d ${OPENSHIFT_REPO_DIR}/php ]]
then
    rm -f ${OPENSHIFT_REPO_DIR}/php
    mkdir ${OPENSHIFT_REPO_DIR}/php
fi

cp -al ${OPENSHIFT_DATA_DIR}/mediawiki-${version}/* ${OPENSHIFT_REPO_DIR}/php/
cp -r ${OPENSHIFT_REPO_DIR}/.openshift/action_hooks/LocalSettings.php ${OPENSHIFT_REPO_DIR}/php/

sed -i "s/MEDIAWIKI_UPGRADE_KEY/${upgrade_key}/;s/MEDIAWIKI_SECRET_KEY/${secret_key}/" ${OPENSHIFT_REPO_DIR}/php/LocalSettings.php

rm -rf ${OPENSHIFT_REPO_DIR}/php/images
ln -s ${OPENSHIFT_DATA_DIR}/images ${OPENSHIFT_REPO_DIR}/php/images

pushd ${OPENSHIFT_REPO_DIR}/php/maintenance
php update.php --quick
